let main = {
    let x = Hi;
    let y = if true x.wow else 2;
    let z = if true x.wow else "hi";
    x
}

/* module A {
    module B {
        module C {
            let foo = 2
        }
    }
    module X {
        module Y { 
            let bar = B.C.foo
        }
    }
}

let baz = A.X.Y.bar
*/


/* module Test {
	let choose = |x| if x 2 else 3 
}

import Test as Wow

let a = |x| Wow.choose(x) */ 

/*
let map = |o, f| {
	match o {
		None -> None,
		Some(a) -> Some(f(a)),
	}
}

let z = map(Some("hi"), |x| 2)
*/

/* 
let z = |x| if x { x } else { x }
*/

/* let rec f = |x| f(f(x)) */


/*
let unwrap_default = |x| match x { Some(a) -> a, None -> 2 } 

let z = unwrap_default(None)
*/

/* let rec produce = |arg| { head: produce(arg) } */

/* let rec f = |x| { left: x , right: f(x) } */

/* let y = |f| |x| f(f(x)) */

/* let p = { id: |x| x } */

/* let z = p.id(2) */

/* let omega = |x| x(x) */

/* let rec produce = |arg| { head: produce(arg) } */

/* let id = |x| x */

/* let x = id(2) */

/* let y = Yo

  let f = |x, m| {
	let y  = {test : m.concat(" wow!")}
	console.log("hi there")
	{ name: x, region: y}

  let a = console.log(f(x, "hi"))
*/
